Relatório de arquivos do diretório: C:/Users/The Coyote/Desktop/Projetos/desafio-credito
Data de geração: 1747096167.7136087
Extensões permitidas: .java, .xml, .yml, Dockerfile.sh


==================================================
Arquivo: ci-cd.yml
==================================================

name: CI/CD Pipeline - Desafio Credito

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test-api:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build and Test credito-api
      working-directory: ./credito-api
      run: |
        mvn clean package -DskipTests
        mvn test

  build-and-test-auditoria:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build and Test credito-auditoria
      working-directory: ./credito-auditoria
      run: |
        mvn clean package -DskipTests
        mvn test

  build-and-test-notificacoes:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build and Test credito-notificacoes
      working-directory: ./credito-notificacoes
      run: |
        mvn clean package -DskipTests
        mvn test

  build-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22.14.0'
        cache: 'npm'
        cache-dependency-path: ./credito-frontend/package-lock.json
    - name: Build credito-frontend
      working-directory: ./credito-frontend
      run: |
        npm install
        npm run build --prod

  build-and-test-analitico:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Build credito-analitico
      working-directory: ./credito-analitico
      run: |
        pip install -r requirements.txt

  build-and-push-docker:
    needs:
      - build-and-test-api
      - build-and-test-auditoria
      - build-and-test-notificacoes
      - build-and-test-frontend
      - build-and-test-analitico
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and Push Docker Images
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/credito-api:latest ./api/api
        docker build -t ${{ secrets.DOCKER_USERNAME }}/credito-auditoria:latest ./auditoria/auditoria
        docker build -t ${{ secrets.DOCKER_USERNAME }}/credito-notificacoes:latest ./notificacoes/notificacao
        docker build -t ${{ secrets.DOCKER_USERNAME }}/credito-frontend:latest ./credito-frontend
        docker build -t ${{ secrets.DOCKER_USERNAME }}/credito-analitico:latest ./credito-analitico
        docker push ${{ secrets.DOCKER_USERNAME }}/credito-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/credito-auditoria:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/credito-notificacoes:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/credito-frontend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/credito-analitico:latest


==================================================
Arquivo: docker-compose.yml
==================================================

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 20s
      timeout: 10s
      retries: 10

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123


  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: credito_db
      POSTGRES_USER: credito_user
      POSTGRES_PASSWORD: senha123

    command: ["postgres", "-c", "log_statement=all"]
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "credito_user", "-d", "credito_db"]
      interval: 10s
      timeout: 5s
      retries: 5  

  api:
    image: ${DOCKER_USERNAME}/credito-api:latest
    build:
      context: ./api/api
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/credito_db
      SPRING_DATASOURCE_USERNAME: credito_user
      SPRING_DATASOURCE_PASSWORD: senha123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: dev
    networks:
      - app-network
    ports:
      - "8080:8080"

  auditoria:
    image: ${DOCKER_USERNAME}/credito-auditoria:latest
    build:
      context: ./auditoria/auditoria
      dockerfile: Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://admin:senha123@mongodb:27017/credito_db
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: dev
    networks:
      - app-network

  notificacoes:
    image: ${DOCKER_USERNAME}/credito-notificacoes:latest
    build:
      context: ./notificacoes/notificacoes
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/credito_db
      SPRING_DATASOURCE_USERNAME: credito_user
      SPRING_DATASOURCE_PASSWORD: senha123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: dev
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8081:8080"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge


==================================================
Arquivo: .idea\misc.xml
==================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectRootManager">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>


==================================================
Arquivo: .idea\modules.xml
==================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/desafio-credito.iml" filepath="$PROJECT_DIR$/.idea/desafio-credito.iml" />
    </modules>
  </component>
</project>


==================================================
Arquivo: .idea\vcs.xml
==================================================

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>


==================================================
Arquivo: api\api\pom.xml
==================================================

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.5</version>
		<relativePath/>
	</parent>
	<groupId>com.desafio</groupId>
	<artifactId>api</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>credito-api</name>
	<description>API de consulta e cadastro de créditos</description>

	<properties>
		<java.version>17</java.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.6.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>


==================================================
Arquivo: api\api\src\main\java\the\coyote\api\ApiApplication.java
==================================================

package the.coyote.api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ApiApplication {

	public static void main(String[] args) {
		SpringApplication.run(ApiApplication.class, args);
	}

}



==================================================
Arquivo: api\api\src\main\java\the\coyote\api\controller\CreditoController.java
==================================================

package the.coyote.api.controller;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import the.coyote.api.model.CreditoEntity;
import the.coyote.api.service.CreditoService;

@RestController
@RequestMapping("api/v1/creditos")
@RequiredArgsConstructor
public class CreditoController {

    private final CreditoService service;

    @Operation(summary = "Consulta créditos por número da NFS-e")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "Lista de créditos retornada"),
        @ApiResponse(responseCode = "404", description = "Nenhum crédito encontrado")
    })
    @GetMapping("/{numeroNfse}")
    public ResponseEntity<List<CreditoEntity>> consultarPorNfse(
            @PathVariable String numeroNfse,
            @RequestHeader("X-Forwarded-For") String ipCliente) {
        List<CreditoEntity> creditos = service.consultarPorNfse(numeroNfse, ipCliente);
        return ResponseEntity.ok(creditos);
    }

    @Operation(summary = "Consulta crédito por número do crédito")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "Crédito retornado"),
        @ApiResponse(responseCode = "404", description = "Crédito não encontrado")
    })
    @GetMapping("/credito/{numeroCredito}")
    public ResponseEntity<CreditoEntity> consultarPorCredito(
            @PathVariable String numeroCredito,
            @RequestHeader("X-Forwarded-For") String ipCliente) {
        CreditoEntity credito = service.consultarPorCredito(numeroCredito, ipCliente);
        return credito != null ? ResponseEntity.ok(credito) : ResponseEntity.notFound().build();
    }

    @Operation(summary = "Cadastra um novo crédito")
    @ApiResponses({
        @ApiResponse(responseCode = "201", description = "Crédito criado"),
        @ApiResponse(responseCode = "400", description = "Dados inválidos")
    })
    @PostMapping
    public ResponseEntity<CreditoEntity> cadastrarCredito(
            @Valid @RequestBody CreditoEntity credito,
            @RequestHeader("X-Forwarded-For") String ipCliente) {
        CreditoEntity saved = service.cadastrarCredito(credito, ipCliente);
        return ResponseEntity.status(201).body(saved);
    }

    @Operation(summary = "Atualiza um crédito existente")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "Crédito atualizado"),
        @ApiResponse(responseCode = "404", description = "Crédito não encontrado")
    })
    @PutMapping("/credito/{numeroCredito}")
    public ResponseEntity<CreditoEntity> atualizarCredito(
            @PathVariable String numeroCredito,
            @Valid @RequestBody CreditoEntity credito,
            @RequestHeader("X-Forwarded-For") String ipCliente) {
        CreditoEntity updated = service.atualizarCredito(numeroCredito, credito, ipCliente);
        return ResponseEntity.ok(updated);
    }

    @Operation(summary = "Exclui um crédito")
    @ApiResponses({
        @ApiResponse(responseCode = "204", description = "Crédito excluído"),
        @ApiResponse(responseCode = "404", description = "Crédito não encontrado")
    })
    @DeleteMapping("/credito/{numeroCredito}")
    public ResponseEntity<Void> deletarCredito(
            @PathVariable String numeroCredito,
            @RequestHeader("X-Forwarded-For") String ipCliente) {
        service.deletarCredito(numeroCredito, ipCliente);
        return ResponseEntity.noContent().build();
    }
}


==================================================
Arquivo: api\api\src\main\java\the\coyote\api\model\ConsultaConcorrenteMessage.java
==================================================

package the.coyote.api.model;

import lombok.Data;

@Data
public class ConsultaConcorrenteMessage {

    private String chave;
    private String ipCliente;

    @Override
    public String toString() {
        return "ConsultaConcorrenteMessage{" +
            "chave='" + chave + '\'' +
            ", ipCliente='" + ipCliente + '\'' +
        '}';
    }

}



==================================================
Arquivo: api\api\src\main\java\the\coyote\api\model\ConsultaLogMessage.java
==================================================

package the.coyote.api.model;

import lombok.Data;

@Data
public class ConsultaLogMessage {

    private String numeroNfse;
    private String numeroCredito;
    private String ipCliente;
    private boolean sucesso;

    @Override
    public String toString() {
        return "ConsultaLogMessage{" +
            "numeroNfse='" + numeroNfse + '\'' +
            ", numeroCredito='" + numeroCredito + '\'' +
            ", ipCliente='" + ipCliente + '\'' +
            ", sucesso=" + sucesso +
        '}';
    }

}



==================================================
Arquivo: api\api\src\main\java\the\coyote\api\model\CreditoCriadoMessage.java
==================================================

package the.coyote.api.model;

import lombok.Data;

@Data
public class CreditoCriadoMessage {

    private String numeroCredito;
    private String ipCliente;

    @Override
    public String toString() {
        return "CreditoCriadoMessage{" +
            "numeroCredito='" + numeroCredito + '\'' +
            ", ipCliente='" + ipCliente + '\'' +
        '}';
    }

}



==================================================
Arquivo: api\api\src\main\java\the\coyote\api\model\CreditoEntity.java
==================================================

package the.coyote.api.model;

import java.math.BigDecimal;
import java.time.LocalDate;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;

@Entity
@Table(name = "credito")
@Data
public class CreditoEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "numero_credito", unique = true, nullable = false)
    private String numeroCredito;

    @Column(name = "numero_nfse", nullable = false)
    private String numeroNfse;

    @Column(name = "ipCliente", nullable = true)
    private String ipCliente;

    @Column(name = "data_constituicao", nullable = false)
    private LocalDate dataConstituicao;

    @Column(name = "valor_issqn", nullable = false)
    private BigDecimal valorIssqn;

    @Column(name = "tipo_credito", nullable = false)
    private String tipoCredito;

    @Column(name = "simples_nacional", nullable = false)
    private boolean simplesNacional;

    @Column(name = "aliquota", nullable = false)
    private BigDecimal aliquota;

    @Column(name = "valor_faturado", nullable = false)
    private BigDecimal valorFaturado;

    @Column(name = "valor_deducao", nullable = false)
    private BigDecimal valorDeducao;

    @Column(name = "base_calculo", nullable = false)
    private BigDecimal baseCalculo;
}


==================================================
Arquivo: api\api\src\main\java\the\coyote\api\repository\CreditoRepository.java
==================================================

package the.coyote.api.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import the.coyote.api.model.CreditoEntity;

public interface CreditoRepository extends JpaRepository<CreditoEntity, Long> {
    List<CreditoEntity> findByNumeroNfse(String numeroNfse);
    Optional<CreditoEntity> findByNumeroCredito(String numeroCredito);
}


==================================================
Arquivo: api\api\src\main\java\the\coyote\api\service\CreditoService.java
==================================================

package the.coyote.api.service;

import java.util.List;

import the.coyote.api.model.CreditoEntity;

public interface CreditoService {
    List<CreditoEntity> consultarPorNfse(String numeroNfse, String ipCliente);
    CreditoEntity consultarPorCredito(String numeroCredito, String ipCliente);
    CreditoEntity cadastrarCredito(CreditoEntity credito, String ipCliente);
    CreditoEntity atualizarCredito(String numeroCredito, CreditoEntity credito, String ipCliente);
    void deletarCredito(String numeroCredito, String ipCliente);
}


==================================================
Arquivo: api\api\src\main\java\the\coyote\api\service\KafkaProducerService.java
==================================================

package the.coyote.api.service;

import the.coyote.api.model.CreditoEntity;

public interface KafkaProducerService {
    void enviarConsultaLog(String numeroNfse, String numeroCredito, boolean sucesso, String ipCliente);
    void enviarConsultaConcorrente(String chave, String ipCliente);
    void enviarCreditoCriado(CreditoEntity credito, String ipCliente);
}


==================================================
Arquivo: api\api\src\main\java\the\coyote\api\service\impl\CreditoServiceImpl.java
==================================================

package the.coyote.api.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import the.coyote.api.model.CreditoEntity;
import the.coyote.api.repository.CreditoRepository;
import the.coyote.api.service.CreditoService;
import the.coyote.api.service.KafkaProducerService;

@Service
@RequiredArgsConstructor
public class CreditoServiceImpl implements CreditoService {

    private final CreditoRepository repository;
    private final KafkaProducerService kafkaProducerService;

    @Override
    public List<CreditoEntity> consultarPorNfse(String numeroNfse, String ipCliente) {
        kafkaProducerService.enviarConsultaLog(numeroNfse, null, true, ipCliente);
        kafkaProducerService.enviarConsultaConcorrente("NFSE:" + numeroNfse, ipCliente);
        return repository.findByNumeroNfse(numeroNfse);
    }

    @Override
    public CreditoEntity consultarPorCredito(String numeroCredito, String ipCliente) {
        kafkaProducerService.enviarConsultaLog(null, numeroCredito, true, ipCliente);
        kafkaProducerService.enviarConsultaConcorrente("CRED:" + numeroCredito, ipCliente);
        return repository.findByNumeroCredito(numeroCredito)
                .orElse(null);
    }

    @Override
    public CreditoEntity cadastrarCredito(CreditoEntity credito, String ipCliente) {
        if (credito.getNumeroCredito() == null || credito.getNumeroNfse() == null) {
            throw new IllegalArgumentException("Número do crédito e NFS-e são obrigatórios");
        }
        if (repository.findByNumeroCredito(credito.getNumeroCredito()).isPresent()) {
            throw new IllegalArgumentException("Crédito com número " + credito.getNumeroCredito() + " já existe");
        }
        CreditoEntity saved = repository.save(credito);
        kafkaProducerService.enviarCreditoCriado(saved, ipCliente);
        return saved;
    }

    @Override
    public CreditoEntity atualizarCredito(String numeroCredito, CreditoEntity credito, String ipCliente) {
        Optional<CreditoEntity> existing = repository.findByNumeroCredito(numeroCredito);
        if (existing.isEmpty()) {
            throw new IllegalArgumentException("Crédito com número " + numeroCredito + " não encontrado");
        }
        CreditoEntity entity = existing.get();
        entity.setNumeroNfse(credito.getNumeroNfse());
        entity.setDataConstituicao(credito.getDataConstituicao());
        entity.setValorIssqn(credito.getValorIssqn());
        entity.setTipoCredito(credito.getTipoCredito());
        entity.setSimplesNacional(credito.isSimplesNacional());
        entity.setAliquota(credito.getAliquota());
        entity.setValorFaturado(credito.getValorFaturado());
        entity.setValorDeducao(credito.getValorDeducao());
        entity.setBaseCalculo(credito.getBaseCalculo());
        CreditoEntity updated = repository.save(entity);
        kafkaProducerService.enviarCreditoCriado(updated, ipCliente);
        return updated;
    }

    @Override
    public void deletarCredito(String numeroCredito, String ipCliente) {
        Optional<CreditoEntity> existing = repository.findByNumeroCredito(numeroCredito);
        if (existing.isEmpty()) {
            throw new IllegalArgumentException("Crédito com número " + numeroCredito + " não encontrado");
        }
        repository.delete(existing.get());
        kafkaProducerService.enviarConsultaLog(null, numeroCredito, false, ipCliente);
    }
}


==================================================
Arquivo: api\api\src\main\java\the\coyote\api\service\impl\KafkaProducerServiceImpl.java
==================================================

package the.coyote.api.service.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import the.coyote.api.model.ConsultaConcorrenteMessage;
import the.coyote.api.model.ConsultaLogMessage;
import the.coyote.api.model.CreditoCriadoMessage;
import the.coyote.api.model.CreditoEntity;
import the.coyote.api.service.KafkaProducerService;

@Service
public class KafkaProducerServiceImpl implements KafkaProducerService {

    private static final Logger logger = LoggerFactory.getLogger(KafkaProducerServiceImpl.class);
    private static final String CONSULTA_LOG_TOPIC = "consulta-log";
    private static final String CONSULTA_CONCORRENTE_TOPIC = "consulta-concorrente";

    private static final String CREDITO_CRIADO_TOPIC = "credito-criado";

    private final KafkaTemplate<String, Object> kafkaTemplate;

    public KafkaProducerServiceImpl(KafkaTemplate<String, Object> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    @Override
    public void enviarConsultaLog(String numeroNfse, String numeroCredito, boolean sucesso, String ipCliente) {
        ConsultaLogMessage message = new ConsultaLogMessage();
        message.setNumeroNfse(numeroNfse);
        message.setNumeroCredito(numeroCredito);
        message.setIpCliente(ipCliente);
        message.setSucesso(sucesso);
        try {
            kafkaTemplate.send(CONSULTA_LOG_TOPIC, message);
            logger.info("Mensagem de log enviada para o tópico {}: {}", CONSULTA_LOG_TOPIC, message);
        } catch (Exception e) {
            logger.error("Erro ao enviar mensagem de log para o tópico {}: {}", CONSULTA_LOG_TOPIC, e.getMessage());
            throw new RuntimeException("Falha ao enviar mensagem de log para o Kafka", e);
        }
    }

    @Override
    public void enviarConsultaConcorrente(String chave, String ipCliente) {
        ConsultaConcorrenteMessage message = new ConsultaConcorrenteMessage();
        message.setChave(chave);
        message.setIpCliente(ipCliente);
        try {
            kafkaTemplate.send(CONSULTA_CONCORRENTE_TOPIC, message);
            logger.info("Mensagem de consulta concorrente enviada para o tópico {}: {}", CONSULTA_CONCORRENTE_TOPIC, message);
        } catch (Exception e) {
            logger.error("Erro ao enviar mensagem de consulta concorrente para o tópico {}: {}", CONSULTA_CONCORRENTE_TOPIC, e.getMessage());
            throw new RuntimeException("Falha ao enviar mensagem de consulta concorrente para o Kafka", e);
        }
    }

    @Override
    public void enviarCreditoCriado(CreditoEntity credito, String ipCliente) {
        CreditoCriadoMessage message = new CreditoCriadoMessage();
        message.setNumeroCredito(credito.getNumeroCredito());
        message.setIpCliente(ipCliente);
        try {
            kafkaTemplate.send(CREDITO_CRIADO_TOPIC, message);
            logger.info("Mensagem de crédito criado enviada para o tópico {}: {}", CREDITO_CRIADO_TOPIC, message);
        } catch (Exception e) {
            logger.error("Erro ao enviar mensagem de crédito criado para o tópico {}: {}", CREDITO_CRIADO_TOPIC, e.getMessage());
            throw new RuntimeException("Falha ao enviar mensagem de crédito criado para o Kafka", e);
        }
    }
}


==================================================
Arquivo: api\api\src\main\resources\application-dev.yml
==================================================

spring:
  datasource:
    url: jdbc:postgresql://db:5432/credito_db
    username: credito_user
    password: senha123
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        "spring.json.add.type.headers": true


server:
  port: 8080

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html


==================================================
Arquivo: api\api\src\main\resources\application-prod.yml
==================================================

spring:
  datasource:
    url: jdbc:postgresql://db:5432/credito_db
    username: credito_user
    password: senha123
  jpa:
    hibernate:
        ddl-auto: update
    show-sql: true

  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: notificacoes-grupo
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: the.coyote.api.model



==================================================
Arquivo: api\api\src\main\resources\application.yml
==================================================

spring:
  profiles:
    active: dev


==================================================
Arquivo: api\api\src\test\java\the\coyote\api\ApiApplicationTests.java
==================================================

package the.coyote.api;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ApiApplicationTests {

	@Test
	void contextLoads() {
	}

}



==================================================
Arquivo: api\api\target\classes\application-dev.yml
==================================================

spring:
  datasource:
    url: jdbc:postgresql://db:5432/credito_db
    username: credito_user
    password: senha123
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        "spring.json.add.type.headers": true


server:
  port: 8080

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html


==================================================
Arquivo: api\api\target\classes\application-prod.yml
==================================================

spring:
  datasource:
    url: jdbc:postgresql://db:5432/credito_db
    username: credito_user
    password: senha123
  jpa:
    hibernate:
        ddl-auto: update
    show-sql: true

  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: notificacoes-grupo
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: the.coyote.api.model



==================================================
Arquivo: api\api\target\classes\application.yml
==================================================

spring:
  profiles:
    active: dev


==================================================
Arquivo: auditoria\auditoria\pom.xml
==================================================

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.5</version>
        <relativePath/>
    </parent>
    <groupId>com.desafio</groupId>
    <artifactId>auditoria</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>credito-auditoria</name>
    <description>Serviço de auditoria para logs de consulta</description>

    <properties>
        <java.version>17</java.version>
    </properties>

<dependencies>
    <!-- Spring Boot Starter -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <!-- Spring Kafka -->
    <dependency>
        <groupId>org.springframework.kafka</groupId>
        <artifactId>spring-kafka</artifactId>
    </dependency>
    <!-- Kafka Clients -->
    <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka-clients</artifactId>
    </dependency>
    <!-- Jackson -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-core</artifactId>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-annotations</artifactId>
    </dependency>
    <!-- MongoDB -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-mongodb</artifactId>
    </dependency>
    <!-- Lombok -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        <version>2.6.0</version>
    </dependency>

</dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>


==================================================
Arquivo: auditoria\auditoria\src\main\java\the\coyote\auditoria\AuditoriaApplication.java
==================================================

package the.coyote.auditoria;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AuditoriaApplication {

	public static void main(String[] args) {
		SpringApplication.run(AuditoriaApplication.class, args);
	}

}



==================================================
Arquivo: auditoria\auditoria\src\main\java\the\coyote\auditoria\model\ConsultaConcorrenteMessage.java
==================================================

package the.coyote.auditoria.model;

import lombok.Data;

@Data
    public class ConsultaConcorrenteMessage {
        private String chave;
        private String ipCliente;
    }



==================================================
Arquivo: auditoria\auditoria\src\main\java\the\coyote\auditoria\model\ConsultaLogEntity.java
==================================================

package the.coyote.auditoria.model;

import java.time.LocalDateTime;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import lombok.Data;

@Data
@Document(collection = "consulta_logs")
public class ConsultaLogEntity {

    @Id
    private String id;

    private LocalDateTime timestamp;
    private String numeroNfse;
    private String numeroCredito;
    private String ipCliente;
    private boolean sucesso;

}



==================================================
Arquivo: auditoria\auditoria\src\main\java\the\coyote\auditoria\model\ConsultaLogMessage.java
==================================================

package the.coyote.auditoria.model;

import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
public class ConsultaLogMessage {
    private String numeroNfse;
    private String numeroCredito;
    private String ipCliente;
    private boolean sucesso;
}


==================================================
Arquivo: auditoria\auditoria\src\main\java\the\coyote\auditoria\repository\ConsultaLogRepository.java
==================================================

package the.coyote.auditoria.repository;

import org.springframework.data.mongodb.repository.MongoRepository;

import the.coyote.auditoria.model.ConsultaLogEntity;

public interface ConsultaLogRepository extends MongoRepository<ConsultaLogEntity, String>{

}



==================================================
Arquivo: auditoria\auditoria\src\main\java\the\coyote\auditoria\service\KafkaConsumerService.java
==================================================

package the.coyote.auditoria.service;

import org.springframework.stereotype.Service;

import the.coyote.auditoria.model.ConsultaConcorrenteMessage;
import the.coyote.auditoria.model.ConsultaLogMessage;


@Service
public interface KafkaConsumerService {

    void consumeConsultaLog(ConsultaLogMessage mesage);
    void consumeConsultaConcorrente(ConsultaConcorrenteMessage message);

    

}



==================================================
Arquivo: auditoria\auditoria\src\main\java\the\coyote\auditoria\service\impl\KafkaConsumerServiceImpl.java
==================================================

package the.coyote.auditoria.service.impl;

import java.time.LocalDateTime;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import the.coyote.auditoria.model.ConsultaConcorrenteMessage;
import the.coyote.auditoria.model.ConsultaLogEntity;
import the.coyote.auditoria.model.ConsultaLogMessage;
import the.coyote.auditoria.repository.ConsultaLogRepository;
import the.coyote.auditoria.service.KafkaConsumerService;

@Service
@RequiredArgsConstructor
public class KafkaConsumerServiceImpl implements KafkaConsumerService {

    private final ConsultaLogRepository repository;

    @KafkaListener(topics = "consulta-log", groupId = "auditoria-group")
    public void consumeConsultaLog(ConsultaLogMessage message) {
        ConsultaLogEntity log = new ConsultaLogEntity();
        log.setTimestamp(LocalDateTime.now());
        log.setNumeroNfse(message.getNumeroNfse());
        log.setNumeroCredito(message.getNumeroCredito());
        log.setIpCliente(message.getIpCliente());
        log.setSucesso(message.isSucesso());
        repository.save(log);
        System.out.println("Consulta log recebida: " + message);
    }

    @KafkaListener(topics = "consulta-concorrente", groupId = "auditoria-group")
    public void consumeConsultaConcorrente(ConsultaConcorrenteMessage message) {
        ConsultaLogEntity log = new ConsultaLogEntity();
        log.setTimestamp(LocalDateTime.now());
        log.setNumeroNfse(message.getChave().startsWith("NFSE") ? message.getChave().substring(5) : null);
        log.setNumeroCredito(message.getChave().startsWith("CRED") ? message.getChave().substring(5) : null);
        log.setIpCliente(message.getIpCliente());
        log.setSucesso(true);
        repository.save(log);
        System.out.println("Consulta concorrente recebida: " + message.getChave() + " de " + message.getIpCliente());
    }
}


==================================================
Arquivo: auditoria\auditoria\src\main\resources\application-dev.yml
==================================================

spring:
  data:
    mongodb:
      uri: mongodb://mongodb:27017/admin
      database: credito_db
      username: admin
      password: admin123

  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: auditoria-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: the.coyote.auditoria.model
server:
  port: 8082


==================================================
Arquivo: auditoria\auditoria\src\main\resources\application-prod.yml
==================================================

spring:
  data:
    mongodb:
      uri: mongodb://mongodb:27017/credito_db
      database: credito_db
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: auditoria-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: the.coyote.auditoria.model
server:
  port: 8082


==================================================
Arquivo: auditoria\auditoria\src\main\resources\application.yml
==================================================

spring:
  profiles:
    active: dev


==================================================
Arquivo: auditoria\auditoria\target\classes\application-dev.yml
==================================================

spring:
  data:
    mongodb:
      uri: mongodb://mongodb:27017/admin
      database: credito_db
      username: admin
      password: admin123

  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: auditoria-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: the.coyote.auditoria.model
server:
  port: 8082


==================================================
Arquivo: auditoria\auditoria\target\classes\application-prod.yml
==================================================

spring:
  data:
    mongodb:
      uri: mongodb://mongodb:27017/credito_db
      database: credito_db
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: auditoria-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: the.coyote.auditoria.model
server:
  port: 8082


==================================================
Arquivo: auditoria\auditoria\target\classes\application.yml
==================================================

spring:
  profiles:
    active: dev


==================================================
Arquivo: notificacoes\notificacoes\pom.xml
==================================================

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.5</version>
        <relativePath/>
    </parent>
    <groupId>com.desafio</groupId>
    <artifactId>notificacoes</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>credito-notificacoes</name>
    <description>Serviço de notificações</description>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
                <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>


==================================================
Arquivo: notificacoes\notificacoes\src\main\java\the\coyote\notificacoes\NotificacoesApplication.java
==================================================

package the.coyote.notificacoes;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class NotificacoesApplication {

	public static void main(String[] args) {
		SpringApplication.run(NotificacoesApplication.class, args);
	}

}



==================================================
Arquivo: notificacoes\notificacoes\src\main\java\the\coyote\notificacoes\model\NotificacaoEntity.java
==================================================

package the.coyote.notificacoes.model;

import java.time.LocalDateTime;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import lombok.Data;

@Entity
@Data
public class NotificacaoEntity {

    @Id
    private String id;
    private String numeroCredito;
    private String ipCliente;
    private LocalDateTime timestamp;
}



==================================================
Arquivo: notificacoes\notificacoes\src\main\java\the\coyote\notificacoes\repository\NotificacaoRepository.java
==================================================

package the.coyote.notificacoes.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import the.coyote.notificacoes.model.NotificacaoEntity;

public interface NotificacaoRepository extends JpaRepository<NotificacaoEntity, String> {

}



==================================================
Arquivo: notificacoes\notificacoes\src\main\java\the\coyote\notificacoes\service\KafkaConsumerService.java
==================================================

package the.coyote.notificacoes.service;

import org.springframework.stereotype.Service;

import the.coyote.notificacoes.service.impl.KafkaConsumerServiceImpl.CreditoCriadoMessage;

@Service
public interface KafkaConsumerService {
    void consumeCreditoCriado(CreditoCriadoMessage message);
}



==================================================
Arquivo: notificacoes\notificacoes\src\main\java\the\coyote\notificacoes\service\impl\KafkaConsumerServiceImpl.java
==================================================

package the.coyote.notificacoes.service.impl;

import java.time.LocalDateTime;
import java.util.UUID;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import lombok.Data;
import lombok.RequiredArgsConstructor;
import the.coyote.notificacoes.model.NotificacaoEntity;
import the.coyote.notificacoes.repository.NotificacaoRepository;
import the.coyote.notificacoes.service.KafkaConsumerService;

@Service
@RequiredArgsConstructor
public class KafkaConsumerServiceImpl implements KafkaConsumerService {

    private final NotificacaoRepository repository;

    @Override
    @KafkaListener(topics = "credito-criado", groupId = "notificacoes-grupo")
    public void consumeCreditoCriado(CreditoCriadoMessage message) {
        NotificacaoEntity notificacao = new NotificacaoEntity();
        notificacao.setId(UUID.randomUUID().toString());
        notificacao.setNumeroCredito(message.getNumeroCredito());
        notificacao.setIpCliente(message.getIpCliente());
        notificacao.setTimestamp(LocalDateTime.now());
        repository.save(notificacao);
        System.out.println("Notificação salva para crédito: " + message.getNumeroCredito());
    }

    @Data
    public static class CreditoCriadoMessage {
        private String numeroCredito;
        private String ipCliente;
    }

}



==================================================
Arquivo: notificacoes\notificacoes\src\main\resources\application-dev.yml
==================================================

spring:
  datasource:
    url: jdbc:postgresql://db:5432/credito_db
    username: credito_user
    password: senha123
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: notificacoes-grupo
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: the.coyote.notificacoes.service.impl


==================================================
Arquivo: notificacoes\notificacoes\src\main\resources\application-prod.yml
==================================================

spring:
  datasource:
    url: jdbc:postgresql://db:5432/credito_db
    username: credito_user
    password: senha123
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: notificacoes-grupo
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.desafio.credito.model



==================================================
Arquivo: notificacoes\notificacoes\src\main\resources\application.yml
==================================================

spring:
  profiles:
    active: dev



==================================================
Arquivo: notificacoes\notificacoes\src\test\java\the\coyote\notificacoes\NotificacoesApplicationTests.java
==================================================

package the.coyote.notificacoes;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class NotificacoesApplicationTests {

	@Test
	void contextLoads() {
	}

}



==================================================
Arquivo: notificacoes\notificacoes\target\classes\application-dev.yml
==================================================

spring:
  datasource:
    url: jdbc:postgresql://db:5432/credito_db
    username: credito_user
    password: senha123
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: notificacoes-grupo
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: the.coyote.notificacoes.service.impl


==================================================
Arquivo: notificacoes\notificacoes\target\classes\application-prod.yml
==================================================

spring:
  datasource:
    url: jdbc:postgresql://db:5432/credito_db
    username: credito_user
    password: senha123
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: notificacoes-grupo
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.desafio.credito.model



==================================================
Arquivo: notificacoes\notificacoes\target\classes\application.yml
==================================================

spring:
  profiles:
    active: dev


==================================================
Resumo:
Total de arquivos processados: 51
Arquivos com erro: 0
Arquivos processados com sucesso: 51
==================================================
