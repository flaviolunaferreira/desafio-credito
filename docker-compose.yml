services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 20s
      timeout: 10s
      retries: 10

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    networks:
      - app-network  
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5


  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: credito_db
      POSTGRES_USER: credito_user
      POSTGRES_PASSWORD: senha123

    command: ["postgres", "-c", "log_statement=all"]
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "credito_user", "-d", "credito_db"]
      interval: 10s
      timeout: 5s
      retries: 5  

  api:
    image: ${DOCKER_USERNAME}/credito-api:latest
    build:
      context: ./api/api
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/credito_db
      SPRING_DATASOURCE_USERNAME: credito_user
      SPRING_DATASOURCE_PASSWORD: senha123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: dev
    networks:
      - app-network
    ports:
      - "8080:8080"

  auditoria:
    image: ${DOCKER_USERNAME}/credito-auditoria:latest
    build:
      context: ./auditoria/auditoria
      dockerfile: Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/credito_db
      spring.DOCKER_USERNAME: admin
      spring.DOCKER_PASSWORD: admin123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: dev
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5  

  notificacoes:
    image: ${DOCKER_USERNAME}/credito-notificacoes:latest
    build:
      context: ./notificacoes/notificacoes
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/credito_db
      SPRING_DATASOURCE_USERNAME: credito_user
      SPRING_DATASOURCE_PASSWORD: senha123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: dev
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8081:8080"
    networks:
      - app-network

  frontend:
    image: ${DOCKER_USERNAME}/credito-frontend:latest
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    networks:
      - app-network
    depends_on:
      api:
        condition: service_healthy

networks:
  app-network:
    driver: bridge